/**
 * Copyright Kai Saksela 2014
 *
 * This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


var LightningWorker =
{
    df_dist: [0.000000, 0.001000, 0.008000, 0.027000, 0.064000, 0.125000, 0.216000, 0.343000, 0.512000, 0.729000, 1.000000, 1.331000, 1.728000, 2.197000, 2.744000, 3.375000, 4.096000, 4.913000, 5.832000, 6.859000, 8.000000, 9.261000,10.648000,12.167000,13.824000,15.625000],
    df_fir_length: 201,
    df_coef_22: [[-0.000000,-0.000000,-0.000001,-0.000001,-0.000001, 0.000003, 0.000013, 0.000026, 0.000042, 0.000060, 0.000080, 0.000102, 0.000125, 0.000149, 0.000172, 0.000192, 0.000210, 0.000224, 0.000234, 0.000242, 0.000247, 0.000251, 0.000253, 0.000254, 0.000255, 0.000256,],[0.000000,0.000000,0.000002,0.000007,0.000013,0.000020,0.000026,0.000034,0.000046,0.000061,0.000080,0.000102,0.000124,0.000146,0.000166,0.000184,0.000199,0.000210,0.000218,0.000223,0.000226,0.000228,0.000229,0.000229,0.000229,0.000229,],[0.000000,-0.000000,-0.000001,-0.000001,-0.000001, 0.000004, 0.000013, 0.000027, 0.000043, 0.000061, 0.000080, 0.000100, 0.000120, 0.000140, 0.000158, 0.000174, 0.000185, 0.000194, 0.000199, 0.000202, 0.000203, 0.000203, 0.000203, 0.000202, 0.000202, 0.000201,],[-0.000000, 0.000000, 0.000002, 0.000006, 0.000011, 0.000018, 0.000025, 0.000033, 0.000045, 0.000060, 0.000078, 0.000097, 0.000116, 0.000133, 0.000149, 0.000161, 0.000170, 0.000175, 0.000178, 0.000178, 0.000178, 0.000177, 0.000175, 0.000174, 0.000174, 0.000173,],[0.000000,0.000000,0.000000,0.000001,0.000003,0.000008,0.000017,0.000029,0.000043,0.000058,0.000075,0.000092,0.000109,0.000124,0.000137,0.000146,0.000152,0.000155,0.000155,0.000154,0.000152,0.000150,0.000148,0.000146,0.000145,0.000145,],[0.000000,0.000000,0.000001,0.000003,0.000007,0.000013,0.000020,0.000030,0.000042,0.000055,0.000071,0.000086,0.000100,0.000113,0.000123,0.000129,0.000132,0.000132,0.000130,0.000128,0.000125,0.000122,0.000120,0.000119,0.000117,0.000117,],[-0.000000, 0.000000, 0.000001, 0.000002, 0.000005, 0.000011, 0.000018, 0.000027, 0.000038, 0.000051, 0.000064, 0.000077, 0.000090, 0.000100, 0.000107, 0.000111, 0.000111, 0.000109, 0.000105, 0.000102, 0.000099, 0.000096, 0.000094, 0.000092, 0.000091, 0.000090,],[0.000000,0.000000,0.000001,0.000002,0.000005,0.000009,0.000014,0.000023,0.000033,0.000044,0.000056,0.000068,0.000079,0.000087,0.000090,0.000090,0.000088,0.000084,0.000080,0.000077,0.000073,0.000071,0.000069,0.000068,0.000067,0.000066,],[0.000000,0.000000,0.000000,0.000001,0.000003,0.000007,0.000013,0.000020,0.000027,0.000037,0.000049,0.000061,0.000069,0.000072,0.000071,0.000068,0.000064,0.000060,0.000056,0.000053,0.000050,0.000048,0.000047,0.000046,0.000045,0.000045,],[0.000000,0.000000,0.000001,0.000004,0.000006,0.000008,0.000009,0.000014,0.000024,0.000037,0.000047,0.000054,0.000055,0.000053,0.000050,0.000045,0.000041,0.000038,0.000035,0.000032,0.000031,0.000029,0.000029,0.000028,0.000027,0.000027,],[-0.000000,-0.000000,-0.000001,-0.000003,-0.000005,-0.000001, 0.000008, 0.000021, 0.000032, 0.000039, 0.000041, 0.000039, 0.000035, 0.000031, 0.000027, 0.000024, 0.000021, 0.000019, 0.000017, 0.000016, 0.000015, 0.000015, 0.000014, 0.000014, 0.000014, 0.000014,],[0.000000,0.000000,0.000002,0.000007,0.000013,0.000020,0.000024,0.000025,0.000024,0.000020,0.000017,0.000014,0.000012,0.000010,0.000009,0.000007,0.000007,0.000006,0.000006,0.000006,0.000006,0.000006,0.000006,0.000006,0.000005,0.000005,],[-0.000000,-0.000000,-0.000000,-0.000000,-0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000003, 0.000003, 0.000003,],[0.000000,0.000000,0.000002,0.000007,0.000014,0.000021,0.000026,0.000027,0.000025,0.000021,0.000018,0.000015,0.000012,0.000010,0.000009,0.000008,0.000007,0.000007,0.000006,0.000006,0.000006,0.000006,0.000006,0.000006,0.000006,0.000006,],[-0.000000,-0.000000,-0.000001,-0.000004,-0.000005,-0.000002, 0.000009, 0.000023, 0.000036, 0.000043, 0.000044, 0.000042, 0.000038, 0.000034, 0.000030, 0.000026, 0.000023, 0.000021, 0.000019, 0.000018, 0.000017, 0.000016, 0.000016, 0.000015, 0.000015, 0.000015,],[-0.000000, 0.000000, 0.000001, 0.000004, 0.000007, 0.000009, 0.000011, 0.000016, 0.000028, 0.000042, 0.000054, 0.000061, 0.000063, 0.000061, 0.000057, 0.000052, 0.000047, 0.000043, 0.000040, 0.000037, 0.000035, 0.000033, 0.000032, 0.000032, 0.000031, 0.000031,],[0.000000,0.000000,0.000000,0.000001,0.000003,0.000008,0.000016,0.000024,0.000033,0.000045,0.000059,0.000073,0.000082,0.000086,0.000085,0.000082,0.000077,0.000072,0.000067,0.000063,0.000060,0.000058,0.000056,0.000055,0.000054,0.000053,],[0.000000,0.000000,0.000001,0.000003,0.000006,0.000011,0.000018,0.000028,0.000041,0.000055,0.000070,0.000086,0.000099,0.000109,0.000113,0.000113,0.000110,0.000105,0.000100,0.000096,0.000092,0.000088,0.000086,0.000084,0.000083,0.000082,],[-0.000000, 0.000000, 0.000001, 0.000003, 0.000007, 0.000014, 0.000024, 0.000036, 0.000050, 0.000066, 0.000084, 0.000101, 0.000118, 0.000132, 0.000141, 0.000145, 0.000145, 0.000142, 0.000138, 0.000133, 0.000129, 0.000125, 0.000122, 0.000120, 0.000119, 0.000118,],[0.000000,0.000000,0.000001,0.000005,0.000010,0.000017,0.000027,0.000041,0.000057,0.000076,0.000097,0.000118,0.000138,0.000155,0.000169,0.000177,0.000181,0.000181,0.000179,0.000175,0.000171,0.000168,0.000165,0.000162,0.000161,0.000160,],[-0.000000, 0.000000, 0.000000, 0.000001, 0.000004, 0.000011, 0.000024, 0.000041, 0.000061, 0.000084, 0.000108, 0.000133, 0.000156, 0.000178, 0.000196, 0.000210, 0.000218, 0.000222, 0.000222, 0.000220, 0.000217, 0.000214, 0.000212, 0.000210, 0.000208, 0.000207,],[0.000000,0.000000,0.000003,0.000008,0.000017,0.000027,0.000037,0.000050,0.000068,0.000091,0.000117,0.000146,0.000174,0.000200,0.000223,0.000242,0.000255,0.000263,0.000267,0.000268,0.000267,0.000265,0.000263,0.000262,0.000261,0.000260,],[-0.000000,-0.000000,-0.000001,-0.000002,-0.000001, 0.000006, 0.000021, 0.000043, 0.000068, 0.000096, 0.000125, 0.000157, 0.000190, 0.000221, 0.000249, 0.000273, 0.000292, 0.000305, 0.000313, 0.000317, 0.000319, 0.000319, 0.000319, 0.000318, 0.000317, 0.000317,],[0.000000,0.000000,0.000004,0.000011,0.000022,0.000033,0.000043,0.000056,0.000075,0.000101,0.000133,0.000168,0.000204,0.000240,0.000274,0.000303,0.000328,0.000346,0.000359,0.000368,0.000373,0.000375,0.000377,0.000377,0.000378,0.000378,],[-0.000000,-0.000000,-0.000001,-0.000002,-0.000001, 0.000006, 0.000022, 0.000046, 0.000073, 0.000104, 0.000138, 0.000176, 0.000217, 0.000257, 0.000296, 0.000332, 0.000362, 0.000386, 0.000405, 0.000418, 0.000427, 0.000433, 0.000437, 0.000439, 0.000440, 0.000441,],[-0.000000, 0.000000, 0.000003, 0.000009, 0.000019, 0.000030, 0.000041, 0.000057, 0.000078, 0.000108, 0.000143, 0.000183, 0.000227, 0.000272, 0.000316, 0.000357, 0.000394, 0.000424, 0.000448, 0.000467, 0.000481, 0.000491, 0.000497, 0.000502, 0.000505, 0.000507,],[0.000000,0.000000,0.000000,0.000001,0.000004,0.000013,0.000028,0.000049,0.000076,0.000108,0.000145,0.000188,0.000235,0.000284,0.000333,0.000380,0.000423,0.000459,0.000490,0.000514,0.000533,0.000548,0.000558,0.000565,0.000570,0.000573,],[-0.000000, 0.000000, 0.000002, 0.000005, 0.000012, 0.000021, 0.000034, 0.000052, 0.000076, 0.000107, 0.000145, 0.000189, 0.000239, 0.000292, 0.000346, 0.000399, 0.000447, 0.000491, 0.000528, 0.000559, 0.000584, 0.000604, 0.000618, 0.000628, 0.000635, 0.000640,],[0.000000,0.000000,0.000001,0.000003,0.000009,0.000018,0.000031,0.000049,0.000072,0.000103,0.000141,0.000187,0.000239,0.000296,0.000355,0.000413,0.000467,0.000518,0.000562,0.000601,0.000632,0.000657,0.000676,0.000689,0.000699,0.000704,],[0.000000,0.000000,0.000001,0.000004,0.000008,0.000014,0.000025,0.000042,0.000065,0.000095,0.000134,0.000182,0.000238,0.000298,0.000360,0.000421,0.000482,0.000539,0.000592,0.000638,0.000677,0.000708,0.000731,0.000748,0.000760,0.000767,],[-0.000000,-0.000000,-0.000000, 0.000001, 0.000004, 0.000011, 0.000023, 0.000037, 0.000057, 0.000087, 0.000129, 0.000180, 0.000235, 0.000295, 0.000358, 0.000423, 0.000490, 0.000556, 0.000618, 0.000672, 0.000719, 0.000755, 0.000783, 0.000803, 0.000817, 0.000826,],[0.000000,0.000000,0.000002,0.000006,0.000010,0.000013,0.000016,0.000028,0.000053,0.000089,0.000131,0.000176,0.000226,0.000283,0.000347,0.000419,0.000494,0.000569,0.000640,0.000703,0.000756,0.000799,0.000831,0.000854,0.000870,0.000881,],[-0.000000,-0.000000,-0.000002,-0.000006,-0.000009,-0.000003, 0.000014, 0.000041, 0.000069, 0.000096, 0.000124, 0.000158, 0.000203, 0.000261, 0.000331, 0.000411, 0.000495, 0.000580, 0.000660, 0.000731, 0.000791, 0.000838, 0.000874, 0.000900, 0.000918, 0.000929,],[0.000000,0.000000,0.000004,0.000011,0.000023,0.000034,0.000043,0.000049,0.000054,0.000065,0.000086,0.000121,0.000171,0.000237,0.000316,0.000405,0.000499,0.000592,0.000680,0.000757,0.000821,0.000873,0.000912,0.000940,0.000959,0.000972,],[0.000000,-0.000000,-0.000000,-0.000000,-0.000001,-0.000001, 0.000000, 0.000004, 0.000014, 0.000031, 0.000059, 0.000101, 0.000158, 0.000230, 0.000316, 0.000411, 0.000510, 0.000608, 0.000700, 0.000781, 0.000849, 0.000903, 0.000944, 0.000973, 0.000993, 0.001006,],[0.000000,0.000000,0.000004,0.000012,0.000024,0.000037,0.000046,0.000052,0.000058,0.000069,0.000092,0.000129,0.000182,0.000252,0.000336,0.000431,0.000530,0.000629,0.000722,0.000804,0.000873,0.000928,0.000969,0.000999,0.001019,0.001032,],[-0.000000,-0.000000,-0.000003,-0.000007,-0.000010,-0.000004, 0.000016, 0.000046, 0.000078, 0.000108, 0.000140, 0.000178, 0.000229, 0.000294, 0.000374, 0.000464, 0.000559, 0.000655, 0.000745, 0.000825, 0.000892, 0.000946, 0.000987, 0.001016, 0.001036, 0.001049,],[0.000000,0.000000,0.000003,0.000007,0.000012,0.000016,0.000020,0.000034,0.000063,0.000107,0.000157,0.000212,0.000271,0.000339,0.000417,0.000502,0.000593,0.000683,0.000768,0.000843,0.000907,0.000958,0.000997,0.001025,0.001044,0.001056,],[-0.000000,-0.000000,-0.000000, 0.000001, 0.000005, 0.000014, 0.000029, 0.000047, 0.000073, 0.000111, 0.000164, 0.000229, 0.000300, 0.000376, 0.000456, 0.000539, 0.000625, 0.000709, 0.000787, 0.000857, 0.000916, 0.000963, 0.000998, 0.001024, 0.001041, 0.001053,],[0.000000,0.000000,0.000002,0.000005,0.000011,0.000019,0.000034,0.000056,0.000088,0.000129,0.000181,0.000247,0.000322,0.000403,0.000487,0.000571,0.000653,0.000730,0.000802,0.000865,0.000917,0.000959,0.000990,0.001013,0.001029,0.001039,],[-0.000000, 0.000000, 0.000001, 0.000005, 0.000013, 0.000026, 0.000044, 0.000070, 0.000104, 0.000148, 0.000203, 0.000268, 0.000344, 0.000427, 0.000511, 0.000594, 0.000673, 0.000745, 0.000809, 0.000864, 0.000910, 0.000946, 0.000973, 0.000992, 0.001005, 0.001014,],[0.000000,0.000000,0.000003,0.000008,0.000018,0.000032,0.000052,0.000079,0.000117,0.000164,0.000222,0.000289,0.000365,0.000446,0.000529,0.000610,0.000684,0.000751,0.000808,0.000855,0.000894,0.000923,0.000945,0.000961,0.000972,0.000978,],[-0.000000, 0.000000, 0.000000, 0.000002, 0.000007, 0.000021, 0.000045, 0.000080, 0.000124, 0.000176, 0.000236, 0.000306, 0.000382, 0.000461, 0.000541, 0.000618, 0.000687, 0.000747, 0.000797, 0.000837, 0.000868, 0.000891, 0.000908, 0.000919, 0.000927, 0.000932,],[0.000000,0.000001,0.000005,0.000016,0.000032,0.000051,0.000072,0.000098,0.000136,0.000186,0.000247,0.000317,0.000393,0.000470,0.000547,0.000618,0.000681,0.000733,0.000776,0.000808,0.000831,0.000848,0.000860,0.000868,0.000873,0.000876,],[-0.000000,-0.000000,-0.000002,-0.000004,-0.000002, 0.000011, 0.000041, 0.000084, 0.000135, 0.000191, 0.000255, 0.000324, 0.000398, 0.000473, 0.000545, 0.000610, 0.000665, 0.000710, 0.000744, 0.000768, 0.000785, 0.000796, 0.000803, 0.000807, 0.000810, 0.000811,],[0.000000,0.000001,0.000007,0.000021,0.000042,0.000064,0.000085,0.000110,0.000147,0.000198,0.000259,0.000328,0.000399,0.000470,0.000535,0.000593,0.000641,0.000677,0.000703,0.000719,0.000729,0.000734,0.000737,0.000738,0.000738,0.000739,],[-0.000000,-0.000000,-0.000002,-0.000004,-0.000002, 0.000012, 0.000044, 0.000089, 0.000142, 0.000199, 0.000261, 0.000327, 0.000395, 0.000460, 0.000519, 0.000569, 0.000607, 0.000635, 0.000652, 0.000661, 0.000664, 0.000664, 0.000663, 0.000661, 0.000660, 0.000659,],[-0.000000, 0.000001, 0.000006, 0.000019, 0.000038, 0.000060, 0.000083, 0.000111, 0.000151, 0.000202, 0.000260, 0.000323, 0.000385, 0.000444, 0.000495, 0.000536, 0.000565, 0.000583, 0.000592, 0.000593, 0.000591, 0.000587, 0.000583, 0.000579, 0.000577, 0.000575,],[0.000000,0.000000,0.000000,0.000002,0.000009,0.000027,0.000056,0.000097,0.000145,0.000198,0.000255,0.000313,0.000369,0.000420,0.000463,0.000494,0.000514,0.000523,0.000523,0.000519,0.000512,0.000505,0.000499,0.000494,0.000490,0.000487,],[0.000000,0.000000,0.000004,0.000011,0.000025,0.000044,0.000069,0.000102,0.000144,0.000192,0.000243,0.000296,0.000346,0.000389,0.000423,0.000445,0.000455,0.000455,0.000448,0.000439,0.000429,0.000419,0.000412,0.000406,0.000402,0.000400,],[-0.000000, 0.000000, 0.000002, 0.000008, 0.000019, 0.000038, 0.000064, 0.000096, 0.000134, 0.000178, 0.000225, 0.000272, 0.000316, 0.000352, 0.000377, 0.000388, 0.000387, 0.000379, 0.000368, 0.000355, 0.000343, 0.000333, 0.000326, 0.000320, 0.000316, 0.000314,],[0.000000,0.000000,0.000003,0.000008,0.000018,0.000031,0.000052,0.000081,0.000117,0.000157,0.000200,0.000244,0.000283,0.000310,0.000323,0.000322,0.000313,0.000299,0.000284,0.000271,0.000259,0.000250,0.000243,0.000238,0.000234,0.000232,],[-0.000000, 0.000000, 0.000000, 0.000002, 0.000010, 0.000026, 0.000048, 0.000072, 0.000100, 0.000136, 0.000181, 0.000222, 0.000250, 0.000261, 0.000259, 0.000248, 0.000233, 0.000216, 0.000202, 0.000189, 0.000179, 0.000172, 0.000166, 0.000163, 0.000160, 0.000158,],[0.000000,0.000001,0.000005,0.000014,0.000024,0.000029,0.000035,0.000053,0.000090,0.000137,0.000177,0.000200,0.000205,0.000198,0.000184,0.000167,0.000151,0.000137,0.000125,0.000116,0.000109,0.000104,0.000100,0.000098,0.000096,0.000095,],[-0.000000,-0.000001,-0.000005,-0.000013,-0.000018,-0.000005, 0.000031, 0.000080, 0.000124, 0.000149, 0.000154, 0.000147, 0.000132, 0.000116, 0.000101, 0.000087, 0.000076, 0.000068, 0.000061, 0.000056, 0.000053, 0.000050, 0.000048, 0.000047, 0.000046, 0.000046,],[0.000000,0.000001,0.000008,0.000026,0.000052,0.000078,0.000095,0.000099,0.000091,0.000079,0.000066,0.000054,0.000044,0.000036,0.000030,0.000026,0.000022,0.000020,0.000018,0.000017,0.000016,0.000015,0.000015,0.000014,0.000014,0.000014,],[-0.000000,-0.000000,-0.000000,-0.000000,-0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000003, 0.000003,],[-0.000000, 0.000001, 0.000009, 0.000028, 0.000057, 0.000086, 0.000104, 0.000108, 0.000100, 0.000087, 0.000072, 0.000059, 0.000048, 0.000040, 0.000033, 0.000028, 0.000024, 0.000021, 0.000019, 0.000018, 0.000017, 0.000016, 0.000016, 0.000015, 0.000015, 0.000015,],[-0.000000,-0.000001,-0.000006,-0.000016,-0.000021,-0.000007, 0.000037, 0.000096, 0.000148, 0.000178, 0.000185, 0.000176, 0.000158, 0.000139, 0.000121, 0.000105, 0.000091, 0.000081, 0.000073, 0.000067, 0.000063, 0.000060, 0.000058, 0.000056, 0.000055, 0.000055,],[0.000000,0.000001,0.000006,0.000018,0.000031,0.000039,0.000046,0.000069,0.000118,0.000179,0.000232,0.000262,0.000269,0.000260,0.000241,0.000219,0.000198,0.000179,0.000164,0.000152,0.000143,0.000136,0.000131,0.000128,0.000126,0.000124,],[-0.000000, 0.000000, 0.000000, 0.000003, 0.000014, 0.000037, 0.000069, 0.000104, 0.000144, 0.000196, 0.000260, 0.000319, 0.000359, 0.000376, 0.000373, 0.000356, 0.000334, 0.000311, 0.000290, 0.000272, 0.000257, 0.000246, 0.000239, 0.000233, 0.000229, 0.000227,],[0.000000,0.000001,0.000004,0.000013,0.000028,0.000049,0.000082,0.000128,0.000185,0.000248,0.000315,0.000385,0.000447,0.000489,0.000509,0.000508,0.000493,0.000471,0.000448,0.000426,0.000407,0.000393,0.000382,0.000374,0.000369,0.000365,],[-0.000000, 0.000000, 0.000004, 0.000013, 0.000033, 0.000065, 0.000110, 0.000166, 0.000232, 0.000308, 0.000388, 0.000470, 0.000546, 0.000609, 0.000651, 0.000670, 0.000670, 0.000656, 0.000635, 0.000613, 0.000593, 0.000575, 0.000562, 0.000552, 0.000546, 0.000541,],[0.000000,0.000001,0.000007,0.000022,0.000047,0.000083,0.000131,0.000194,0.000273,0.000364,0.000462,0.000562,0.000656,0.000739,0.000803,0.000844,0.000862,0.000862,0.000850,0.000832,0.000812,0.000795,0.000781,0.000770,0.000762,0.000757,],[-0.000000, 0.000000, 0.000001, 0.000005, 0.000020, 0.000055, 0.000117, 0.000202, 0.000302, 0.000413, 0.000531, 0.000652, 0.000769, 0.000876, 0.000964, 0.001030, 0.001071, 0.001089, 0.001090, 0.001081, 0.001066, 0.001051, 0.001038, 0.001027, 0.001020, 0.001015,],[0.000000,0.000002,0.000014,0.000043,0.000087,0.000137,0.000190,0.000255,0.000345,0.000462,0.000596,0.000739,0.000882,0.001016,0.001133,0.001226,0.001293,0.001335,0.001354,0.001358,0.001353,0.001344,0.001334,0.001326,0.001320,0.001315,],[-0.000000,-0.000001,-0.000005,-0.000011,-0.000006, 0.000030, 0.000110, 0.000225, 0.000358, 0.000502, 0.000658, 0.000825, 0.000995, 0.001158, 0.001307, 0.001432, 0.001530, 0.001598, 0.001641, 0.001664, 0.001672, 0.001673, 0.001670, 0.001666, 0.001662, 0.001660,],[0.000000,0.000003,0.000019,0.000059,0.000117,0.000178,0.000235,0.000305,0.000408,0.000549,0.000720,0.000909,0.001107,0.001302,0.001485,0.001646,0.001778,0.001878,0.001949,0.001995,0.002022,0.002036,0.002043,0.002047,0.002048,0.002048,],[-0.000000,-0.000001,-0.000006,-0.000013,-0.000008, 0.000034, 0.000125, 0.000257, 0.000412, 0.000585, 0.000778, 0.000992, 0.001218, 0.001447, 0.001666, 0.001865, 0.002035, 0.002172, 0.002276, 0.002350, 0.002401, 0.002434, 0.002455, 0.002468, 0.002477, 0.002482,],[0.000000,0.000002,0.000018,0.000054,0.000109,0.000173,0.000242,0.000331,0.000457,0.000627,0.000835,0.001071,0.001325,0.001588,0.001846,0.002086,0.002299,0.002477,0.002619,0.002727,0.002807,0.002864,0.002904,0.002931,0.002948,0.002959,],[-0.000000, 0.000000, 0.000001, 0.000006, 0.000027, 0.000078, 0.000170, 0.000300, 0.000462, 0.000656, 0.000882, 0.001141, 0.001424, 0.001722, 0.002021, 0.002306, 0.002565, 0.002789, 0.002974, 0.003123, 0.003239, 0.003326, 0.003389, 0.003433, 0.003462, 0.003481,],[0.000000,0.000001,0.000011,0.000034,0.000074,0.000132,0.000214,0.000328,0.000481,0.000678,0.000916,0.001195,0.001508,0.001845,0.002188,0.002521,0.002829,0.003103,0.003340,0.003537,0.003695,0.003818,0.003909,0.003974,0.004017,0.004046,],[-0.000000, 0.000001, 0.000006, 0.000023, 0.000057, 0.000117, 0.000204, 0.000321, 0.000476, 0.000678, 0.000929, 0.001230, 0.001578, 0.001956, 0.002344, 0.002725, 0.003085, 0.003416, 0.003712, 0.003966, 0.004175, 0.004339, 0.004463, 0.004552, 0.004612, 0.004652,],[0.000000,0.000001,0.000008,0.000025,0.000054,0.000098,0.000171,0.000287,0.000447,0.000655,0.000923,0.001256,0.001641,0.002056,0.002482,0.002909,0.003327,0.003724,0.004089,0.004409,0.004677,0.004890,0.005051,0.005167,0.005246,0.005298,],[-0.000000,-0.000000,-0.000000, 0.000005, 0.000028, 0.000082, 0.000165, 0.000269, 0.000413, 0.000630, 0.000933, 0.001299, 0.001702, 0.002133, 0.002588, 0.003064, 0.003550, 0.004027, 0.004473, 0.004869, 0.005203, 0.005469, 0.005672, 0.005817, 0.005917, 0.005982,],[0.000000,0.000002,0.000016,0.000046,0.000078,0.000098,0.000125,0.000213,0.000402,0.000676,0.000996,0.001341,0.001721,0.002152,0.002643,0.003186,0.003759,0.004330,0.004870,0.005350,0.005756,0.006080,0.006325,0.006502,0.006623,0.006702,],[0.000000,-0.000003,-0.000020,-0.000052,-0.000072,-0.000027, 0.000114, 0.000325, 0.000552, 0.000768, 0.000992, 0.001266, 0.001626, 0.002089, 0.002652, 0.003292, 0.003973, 0.004653, 0.005293, 0.005862, 0.006341, 0.006723, 0.007012, 0.007220, 0.007363, 0.007455,],[0.000000,0.000004,0.000031,0.000095,0.000191,0.000292,0.000367,0.000413,0.000460,0.000552,0.000730,0.001024,0.001450,0.002007,0.002680,0.003436,0.004232,0.005022,0.005761,0.006416,0.006965,0.007402,0.007733,0.007970,0.008133,0.008239,],[-0.000000,-0.000000,-0.000001,-0.000004,-0.000008,-0.000008, 0.000003, 0.000039, 0.000122, 0.000276, 0.000529, 0.000905, 0.001417, 0.002067, 0.002836, 0.003691, 0.004586, 0.005469, 0.006294, 0.007023, 0.007634, 0.008120, 0.008487, 0.008751, 0.008932, 0.009049,],[0.000000,0.000005,0.000037,0.000114,0.000230,0.000350,0.000440,0.000495,0.000551,0.000662,0.000876,0.001229,0.001739,0.002407,0.003214,0.004121,0.005076,0.006024,0.006910,0.007696,0.008354,0.008879,0.009276,0.009561,0.009756,0.009882,],[0.000000,-0.000004,-0.000028,-0.000075,-0.000103,-0.000039, 0.000164, 0.000468, 0.000795, 0.001106, 0.001429, 0.001823, 0.002341, 0.003008, 0.003819, 0.004740, 0.005721, 0.006700, 0.007622, 0.008441, 0.009131, 0.009681, 0.010097, 0.010397, 0.010602, 0.010735,],[0.000000,0.000004,0.000028,0.000079,0.000135,0.000170,0.000216,0.000369,0.000696,0.001171,0.001724,0.002322,0.002979,0.003725,0.004575,0.005515,0.006507,0.007497,0.008430,0.009262,0.009964,0.010525,0.010950,0.011257,0.011466,0.011603,],[-0.000000,-0.000000,-0.000000, 0.000010, 0.000058, 0.000171, 0.000344, 0.000561, 0.000861, 0.001315, 0.001946, 0.002709, 0.003551, 0.004449, 0.005399, 0.006392, 0.007406, 0.008400, 0.009331, 0.010157, 0.010854, 0.011410, 0.011832, 0.012136, 0.012344, 0.012480,],[0.000000,0.000003,0.000020,0.000063,0.000135,0.000247,0.000432,0.000723,0.001127,0.001651,0.002327,0.003168,0.004140,0.005186,0.006261,0.007337,0.008391,0.009393,0.010313,0.011120,0.011795,0.012332,0.012739,0.013032,0.013232,0.013362,],[-0.000000, 0.000002, 0.000019, 0.000069, 0.000176, 0.000358, 0.000624, 0.000982, 0.001458, 0.002075, 0.002843, 0.003766, 0.004831, 0.005989, 0.007177, 0.008343, 0.009446, 0.010461, 0.011365, 0.012142, 0.012782, 0.013287, 0.013666, 0.013938, 0.014123, 0.014243,],[0.000000,0.000005,0.000040,0.000127,0.000277,0.000494,0.000799,0.001225,0.001799,0.002532,0.003424,0.004465,0.005635,0.006893,0.008177,0.009421,0.010571,0.011597,0.012480,0.013217,0.013809,0.014268,0.014607,0.014849,0.015012,0.015118,],[-0.000000, 0.000000, 0.000003, 0.000027, 0.000122, 0.000358, 0.000779, 0.001375, 0.002120, 0.003009, 0.004050, 0.005235, 0.006536, 0.007904, 0.009277, 0.010587, 0.011773, 0.012800, 0.013653, 0.014338, 0.014869, 0.015268, 0.015556, 0.015758, 0.015893, 0.015980,],[0.000000,0.000013,0.000100,0.000307,0.000622,0.000982,0.001375,0.001880,0.002600,0.003566,0.004745,0.006085,0.007533,0.009025,0.010491,0.011857,0.013065,0.014077,0.014883,0.015500,0.015955,0.016280,0.016506,0.016659,0.016759,0.016822,],[-0.000000,-0.000006,-0.000040,-0.000091,-0.000054, 0.000240, 0.000887, 0.001823, 0.002927, 0.004157, 0.005532, 0.007049, 0.008656, 0.010281, 0.011839, 0.013253, 0.014463, 0.015437, 0.016174, 0.016701, 0.017061, 0.017297, 0.017449, 0.017544, 0.017602, 0.017638,],[0.000000,0.000023,0.000175,0.000534,0.001054,0.001599,0.002115,0.002743,0.003669,0.004939,0.006474,0.008176,0.009955,0.011714,0.013357,0.014801,0.015987,0.016892,0.017529,0.017939,0.018182,0.018312,0.018376,0.018405,0.018417,0.018422,],[-0.000000,-0.000008,-0.000056,-0.000128,-0.000073, 0.000351, 0.001276, 0.002599, 0.004130, 0.005795, 0.007602, 0.009527, 0.011489, 0.013381, 0.015094, 0.016541, 0.017668, 0.018461, 0.018955, 0.019212, 0.019310, 0.019315, 0.019280, 0.019235, 0.019196, 0.019166,],[0.000000,0.000027,0.000211,0.000649,0.001310,0.002064,0.002864,0.003856,0.005219,0.006975,0.009009,0.011173,0.013331,0.015351,0.017113,0.018526,0.019540,0.020163,0.020458,0.020517,0.020438,0.020298,0.020151,0.020025,0.019930,0.019864,],[-0.000000, 0.000001, 0.000015, 0.000097, 0.000397, 0.001122, 0.002377, 0.004088, 0.006110, 0.008349, 0.010741, 0.013191, 0.015563, 0.017712, 0.019501, 0.020826, 0.021650, 0.022018, 0.022040, 0.021847, 0.021554, 0.021249, 0.020979, 0.020767, 0.020613, 0.020510,],[0.000000,0.000024,0.000190,0.000605,0.001312,0.002314,0.003656,0.005417,0.007609,0.010150,0.012896,0.015673,0.018308,0.020615,0.022403,0.023547,0.024052,0.024043,0.023696,0.023186,0.022645,0.022154,0.021753,0.021451,0.021238,0.021097,],[-0.000000, 0.000018, 0.000150, 0.000530, 0.001318, 0.002622, 0.004417, 0.006642, 0.009298, 0.012326, 0.015556, 0.018816, 0.021873, 0.024390, 0.026071, 0.026828, 0.026798, 0.026237, 0.025407, 0.024513, 0.023688, 0.022997, 0.022460, 0.022068, 0.021797, 0.021620,],[0.000000,0.000033,0.000256,0.000795,0.001679,0.002976,0.004952,0.007784,0.011242,0.015040,0.019151,0.023383,0.027119,0.029705,0.030879,0.030811,0.029900,0.028564,0.027126,0.025791,0.024658,0.023761,0.023088,0.022609,0.022283,0.022072,],[-0.000000, 0.000001, 0.000034, 0.000314, 0.001379, 0.003678, 0.006891, 0.010359, 0.014327, 0.019604, 0.025936, 0.031830, 0.035851, 0.037508, 0.037158, 0.035516, 0.033273, 0.030929, 0.028782, 0.026968, 0.025524, 0.024425, 0.023625, 0.023066, 0.022691, 0.022450,],[0.000000,0.000159,0.001189,0.003367,0.005781,0.007212,0.008529,0.012875,0.021952,0.033450,0.043268,0.048885,0.050168,0.048321,0.044777,0.040659,0.036669,0.033163,0.030269,0.027985,0.026248,0.024970,0.024058,0.023431,0.023014,0.022748,],[-0.000000,-0.000361,-0.002655,-0.007013,-0.009443,-0.002910, 0.016104, 0.042296, 0.065394, 0.078573, 0.081460, 0.077282, 0.069587, 0.060905, 0.052669, 0.045529, 0.039668, 0.035031, 0.031461, 0.028775, 0.026797, 0.025375, 0.024377, 0.023697, 0.023248, 0.022963,],[0.000000,0.002187,0.016929,0.052305,0.104984,0.158381,0.192762,0.199619,0.184814,0.159678,0.132795,0.108403,0.087959,0.071582,0.058834,0.049098,0.041760,0.036284,0.032237,0.029277,0.027141,0.025625,0.024571,0.023858,0.023390,0.023094,],[1.000000,0.995687,0.966290,0.893011,0.773603,0.627134,0.483367,0.363872,0.273628,0.207443,0.158692,0.122535,0.095698,0.075836,0.061188,0.050417,0.042513,0.036727,0.032507,0.029450,0.027258,0.025709,0.024637,0.023913,0.023438,0.023137,]],
    df_coef_441: [[-0.000000, 0.000000, 0.000003, 0.000010, 0.000020, 0.000030, 0.000039, 0.000051, 0.000068, 0.000088, 0.000111, 0.000135, 0.000157, 0.000175, 0.000186, 0.000191, 0.000191, 0.000187, 0.000181, 0.000174, 0.000168, 0.000164, 0.000160, 0.000157, 0.000155, 0.000154],[0.000000,0.000000,0.000001,0.000003,0.000006,0.000013,0.000025,0.000041,0.000061,0.000083,0.000105,0.000128,0.000149,0.000164,0.000173,0.000175,0.000173,0.000167,0.000160,0.000153,0.000147,0.000143,0.000139,0.000136,0.000135,0.000133,],[-0.000000,-0.000000,-0.000002,-0.000005,-0.000006,-0.000001, 0.000014, 0.000034, 0.000056, 0.000077, 0.000099, 0.000121, 0.000141, 0.000154, 0.000159, 0.000158, 0.000154, 0.000147, 0.000139, 0.000132, 0.000127, 0.000122, 0.000119, 0.000116, 0.000115, 0.000114,],[0.000000,0.000000,0.000000,0.000001,0.000005,0.000013,0.000025,0.000039,0.000054,0.000072,0.000094,0.000115,0.000132,0.000142,0.000144,0.000140,0.000134,0.000126,0.000119,0.000112,0.000107,0.000103,0.000100,0.000097,0.000096,0.000095,],[-0.000000, 0.000000, 0.000003, 0.000009, 0.000018, 0.000027, 0.000034, 0.000040, 0.000051, 0.000068, 0.000090, 0.000111, 0.000124, 0.000129, 0.000127, 0.000121, 0.000113, 0.000106, 0.000098, 0.000092, 0.000088, 0.000084, 0.000081, 0.000080, 0.000078, 0.000078,],[-0.000000, 0.000000, 0.000003, 0.000010, 0.000019, 0.000025, 0.000028, 0.000033, 0.000046, 0.000067, 0.000089, 0.000106, 0.000114, 0.000114, 0.000109, 0.000101, 0.000093, 0.000085, 0.000079, 0.000074, 0.000070, 0.000067, 0.000064, 0.000063, 0.000062, 0.000061,],[0.000000,-0.000000,-0.000000,-0.000001,-0.000002,-0.000001, 0.000005, 0.000021, 0.000044, 0.000069, 0.000089, 0.000099, 0.000100, 0.000096, 0.000089, 0.000081, 0.000073, 0.000066, 0.000061, 0.000057, 0.000053, 0.000051, 0.000049, 0.000048, 0.000047, 0.000047,],[0.000000,-0.000000,-0.000002,-0.000007,-0.000011,-0.000009, 0.000004, 0.000027, 0.000053, 0.000074, 0.000086, 0.000088, 0.000083, 0.000076, 0.000068, 0.000061, 0.000054, 0.000049, 0.000044, 0.000041, 0.000039, 0.000037, 0.000036, 0.000035, 0.000034, 0.000034,],[-0.000000,-0.000000,-0.000001,-0.000002,-0.000001, 0.000008, 0.000025, 0.000047, 0.000065, 0.000074, 0.000075, 0.000070, 0.000063, 0.000055, 0.000048, 0.000042, 0.000037, 0.000033, 0.000030, 0.000028, 0.000026, 0.000025, 0.000024, 0.000024, 0.000023, 0.000023,],[-0.000000, 0.000000, 0.000003, 0.000010, 0.000021, 0.000036, 0.000050, 0.000060, 0.000063, 0.000060, 0.000054, 0.000047, 0.000040, 0.000034, 0.000029, 0.000025, 0.000022, 0.000020, 0.000018, 0.000017, 0.000016, 0.000016, 0.000015, 0.000015, 0.000015, 0.000014,],[-0.000000, 0.000000, 0.000003, 0.000010, 0.000021, 0.000032, 0.000040, 0.000043, 0.000040, 0.000034, 0.000028, 0.000024, 0.000020, 0.000016, 0.000014, 0.000012, 0.000011, 0.000010, 0.000010, 0.000009, 0.000009, 0.000009, 0.000008, 0.000008, 0.000008, 0.000008,],[0.000000,0.000000,0.000002,0.000005,0.000009,0.000013,0.000014,0.000013,0.000011,0.000009,0.000007,0.000006,0.000005,0.000005,0.000005,0.000005,0.000005,0.000004,0.000004,0.000004,0.000005,0.000005,0.000005,0.000005,0.000005,0.000005,],[0.000000,0.000000,0.000000,0.000000,0.000000,0.000001,0.000001,0.000001,0.000001,0.000001,0.000002,0.000002,0.000002,0.000002,0.000002,0.000003,0.000003,0.000003,0.000003,0.000003,0.000003,0.000004,0.000004,0.000004,0.000004,0.000004,],[-0.000000, 0.000000, 0.000003, 0.000008, 0.000016, 0.000023, 0.000027, 0.000026, 0.000023, 0.000019, 0.000015, 0.000013, 0.000011, 0.000009, 0.000008, 0.000007, 0.000007, 0.000007, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,],[0.000000,0.000000,0.000004,0.000012,0.000025,0.000040,0.000053,0.000058,0.000056,0.000050,0.000043,0.000036,0.000030,0.000025,0.000021,0.000019,0.000016,0.000015,0.000014,0.000013,0.000012,0.000012,0.000012,0.000011,0.000011,0.000011,],[-0.000000, 0.000000, 0.000002, 0.000007, 0.000017, 0.000032, 0.000050, 0.000067, 0.000077, 0.000078, 0.000073, 0.000065, 0.000057, 0.000048, 0.000042, 0.000036, 0.000032, 0.000028, 0.000026, 0.000024, 0.000022, 0.000022, 0.000021, 0.000020, 0.000020, 0.000020,],[0.000000,-0.000000,-0.000003,-0.000007,-0.000010,-0.000003, 0.000016, 0.000045, 0.000073, 0.000091, 0.000097, 0.000094, 0.000086, 0.000076, 0.000067, 0.000059, 0.000052, 0.000047, 0.000042, 0.000039, 0.000037, 0.000035, 0.000034, 0.000033, 0.000033, 0.000032,],[-0.000000,-0.000000,-0.000002,-0.000007,-0.000011,-0.000011, 0.000002, 0.000028, 0.000062, 0.000092, 0.000111, 0.000117, 0.000115, 0.000106, 0.000096, 0.000086, 0.000077, 0.000070, 0.000063, 0.000059, 0.000055, 0.000053, 0.000051, 0.000050, 0.000049, 0.000048,],[0.000000,0.000000,0.000001,0.000004,0.000007,0.000011,0.000017,0.000032,0.000058,0.000090,0.000118,0.000135,0.000140,0.000137,0.000128,0.000117,0.000106,0.000097,0.000089,0.000083,0.000078,0.000075,0.000072,0.000070,0.000069,0.000068,],[0.000000,0.000001,0.000005,0.000016,0.000030,0.000042,0.000047,0.000052,0.000066,0.000093,0.000124,0.000149,0.000163,0.000166,0.000160,0.000151,0.000139,0.000129,0.000119,0.000111,0.000105,0.000101,0.000097,0.000095,0.000094,0.000093,],[0.000000,0.000000,0.000003,0.000008,0.000019,0.000032,0.000045,0.000059,0.000076,0.000101,0.000132,0.000163,0.000184,0.000194,0.000194,0.000186,0.000175,0.000164,0.000153,0.000144,0.000137,0.000131,0.000127,0.000124,0.000122,0.000121,],[-0.000000,-0.000000,-0.000001,-0.000003,-0.000001, 0.000009, 0.000029, 0.000056, 0.000083, 0.000112, 0.000145, 0.000178, 0.000206, 0.000222, 0.000227, 0.000223, 0.000214, 0.000203, 0.000191, 0.000181, 0.000173, 0.000166, 0.000161, 0.000158, 0.000156, 0.000154,],[-0.000000,-0.000000,-0.000002,-0.000006,-0.000007, 0.000002, 0.000024, 0.000057, 0.000092, 0.000126, 0.000161, 0.000196, 0.000228, 0.000250, 0.000261, 0.000262, 0.000255, 0.000245, 0.000233, 0.000222, 0.000213, 0.000206, 0.000200, 0.000196, 0.000193, 0.000192,],[0.000000,0.000000,0.000004,0.000011,0.000022,0.000036,0.000053,0.000076,0.000106,0.000142,0.000179,0.000217,0.000252,0.000280,0.000296,0.000302,0.000299,0.000290,0.000279,0.000268,0.000258,0.000250,0.000243,0.000239,0.000236,0.000234,],[-0.000000, 0.000001, 0.000006, 0.000019, 0.000038, 0.000057, 0.000074, 0.000093, 0.000121, 0.000157, 0.000198, 0.000239, 0.000278, 0.000310, 0.000333, 0.000343, 0.000344, 0.000338, 0.000328, 0.000317, 0.000307, 0.000298, 0.000291, 0.000287, 0.000283, 0.000281,],[-0.000000, 0.000001, 0.000004, 0.000013, 0.000028, 0.000048, 0.000070, 0.000097, 0.000130, 0.000171, 0.000216, 0.000262, 0.000305, 0.000342, 0.000370, 0.000386, 0.000391, 0.000388, 0.000380, 0.000370, 0.000360, 0.000351, 0.000344, 0.000339, 0.000336, 0.000333,],[-0.000000,-0.000000,-0.000002,-0.000004,-0.000002, 0.000013, 0.000044, 0.000087, 0.000134, 0.000183, 0.000234, 0.000285, 0.000333, 0.000375, 0.000409, 0.000430, 0.000440, 0.000441, 0.000436, 0.000427, 0.000418, 0.000409, 0.000402, 0.000397, 0.000393, 0.000390,],[0.000000,-0.000000,-0.000001,-0.000001, 0.000003, 0.000018, 0.000049, 0.000092, 0.000142, 0.000196, 0.000251, 0.000307, 0.000361, 0.000409, 0.000448, 0.000476, 0.000492, 0.000497, 0.000494, 0.000488, 0.000479, 0.000471, 0.000464, 0.000459, 0.000455, 0.000453,],[0.000000,0.000001,0.000004,0.000013,0.000028,0.000049,0.000075,0.000110,0.000155,0.000209,0.000268,0.000330,0.000389,0.000444,0.000489,0.000523,0.000545,0.000555,0.000556,0.000552,0.000545,0.000538,0.000532,0.000527,0.000523,0.000520,],[-0.000000, 0.000001, 0.000008, 0.000026, 0.000050, 0.000076, 0.000100, 0.000127, 0.000167, 0.000221, 0.000285, 0.000351, 0.000417, 0.000478, 0.000531, 0.000571, 0.000599, 0.000615, 0.000621, 0.000620, 0.000615, 0.000609, 0.000604, 0.000599, 0.000596, 0.000593,],[-0.000000, 0.000000, 0.000004, 0.000012, 0.000027, 0.000050, 0.000081, 0.000121, 0.000171, 0.000232, 0.000300, 0.000373, 0.000445, 0.000513, 0.000573, 0.000621, 0.000656, 0.000678, 0.000689, 0.000691, 0.000689, 0.000685, 0.000681, 0.000677, 0.000674, 0.000672,],[-0.000000,-0.000000,-0.000001,-0.000002, 0.000002, 0.000021, 0.000059, 0.000112, 0.000174, 0.000242, 0.000316, 0.000394, 0.000473, 0.000549, 0.000616, 0.000672, 0.000714, 0.000743, 0.000759, 0.000766, 0.000767, 0.000766, 0.000762, 0.000760, 0.000757, 0.000755,],[0.000000,-0.000000,-0.000001,-0.000002, 0.000002, 0.000022, 0.000060, 0.000116, 0.000181, 0.000252, 0.000331, 0.000415, 0.000501, 0.000584, 0.000660, 0.000724, 0.000774, 0.000810, 0.000832, 0.000844, 0.000849, 0.000850, 0.000849, 0.000847, 0.000846, 0.000845,],[-0.000000, 0.000001, 0.000006, 0.000020, 0.000042, 0.000068, 0.000099, 0.000140, 0.000195, 0.000265, 0.000347, 0.000436, 0.000529, 0.000620, 0.000704, 0.000777, 0.000835, 0.000879, 0.000908, 0.000926, 0.000935, 0.000939, 0.000941, 0.000941, 0.000940, 0.000940,],[-0.000000, 0.000001, 0.000009, 0.000027, 0.000053, 0.000083, 0.000113, 0.000151, 0.000204, 0.000276, 0.000362, 0.000457, 0.000557, 0.000656, 0.000749, 0.000830, 0.000898, 0.000950, 0.000986, 0.001010, 0.001025, 0.001033, 0.001037, 0.001039, 0.001040, 0.001040,],[0.000000,0.000001,0.000005,0.000015,0.000033,0.000059,0.000095,0.000143,0.000207,0.000285,0.000376,0.000478,0.000585,0.000692,0.000794,0.000885,0.000962,0.001022,0.001067,0.001098,0.001118,0.001130,0.001138,0.001142,0.001144,0.001146,],[-0.000000,-0.000000,-0.000003,-0.000007,-0.000004, 0.000016, 0.000062, 0.000128, 0.000206, 0.000293, 0.000391, 0.000498, 0.000612, 0.000728, 0.000839, 0.000940, 0.001026, 0.001096, 0.001149, 0.001188, 0.001214, 0.001232, 0.001243, 0.001250, 0.001255, 0.001257,],[-0.000000,-0.000000, 0.000000, 0.000002, 0.000011, 0.000034, 0.000078, 0.000140, 0.000216, 0.000304, 0.000405, 0.000518, 0.000639, 0.000763, 0.000884, 0.000995, 0.001092, 0.001172, 0.001234, 0.001281, 0.001314, 0.001337, 0.001353, 0.001364, 0.001370, 0.001374,],[0.000000,0.000001,0.000007,0.000022,0.000046,0.000077,0.000114,0.000162,0.000228,0.000314,0.000419,0.000537,0.000666,0.000798,0.000928,0.001050,0.001158,0.001248,0.001321,0.001376,0.001418,0.001447,0.001468,0.001482,0.001491,0.001497,],[0.000000,0.000001,0.000011,0.000033,0.000066,0.000099,0.000132,0.000174,0.000236,0.000323,0.000431,0.000555,0.000691,0.000832,0.000972,0.001105,0.001224,0.001326,0.001409,0.001474,0.001524,0.001561,0.001587,0.001605,0.001617,0.001625,],[-0.000000, 0.000000, 0.000003, 0.000010, 0.000026, 0.000052, 0.000094, 0.000154, 0.000233, 0.000329, 0.000442, 0.000572, 0.000714, 0.000864, 0.001015, 0.001160, 0.001290, 0.001404, 0.001498, 0.001574, 0.001634, 0.001678, 0.001710, 0.001733, 0.001748, 0.001758,],[0.000000,-0.000000,-0.000003,-0.000006,-0.000003, 0.000019, 0.000069, 0.000142, 0.000231, 0.000333, 0.000451, 0.000586, 0.000736, 0.000896, 0.001058, 0.001213, 0.001356, 0.001482, 0.001589, 0.001677, 0.001746, 0.001799, 0.001838, 0.001866, 0.001884, 0.001897,],[-0.000000,-0.000000,-0.000001,-0.000001, 0.000007, 0.000033, 0.000083, 0.000152, 0.000237, 0.000338, 0.000458, 0.000598, 0.000756, 0.000925, 0.001098, 0.001266, 0.001422, 0.001561, 0.001681, 0.001781, 0.001861, 0.001924, 0.001970, 0.002003, 0.002026, 0.002040,],[0.000000,0.000001,0.000010,0.000030,0.000060,0.000095,0.000132,0.000178,0.000246,0.000341,0.000463,0.000608,0.000774,0.000954,0.001138,0.001318,0.001486,0.001639,0.001773,0.001887,0.001980,0.002052,0.002107,0.002146,0.002172,0.002189,],[-0.000000, 0.000001, 0.000010, 0.000032, 0.000063, 0.000096, 0.000129, 0.000173, 0.000242, 0.000339, 0.000464, 0.000615, 0.000790, 0.000980, 0.001176, 0.001367, 0.001549, 0.001716, 0.001866, 0.001995, 0.002101, 0.002184, 0.002247, 0.002293, 0.002323, 0.002343,],[0.000000,0.000000,0.000003,0.000011,0.000024,0.000048,0.000086,0.000146,0.000228,0.000333,0.000463,0.000622,0.000806,0.001006,0.001211,0.001414,0.001610,0.001793,0.001960,0.002104,0.002225,0.002320,0.002392,0.002444,0.002479,0.002502,],[-0.000000,-0.000001,-0.000006,-0.000017,-0.000022,-0.000005, 0.000045, 0.000123, 0.000216, 0.000325, 0.000461, 0.000629, 0.000822, 0.001030, 0.001244, 0.001458, 0.001669, 0.001870, 0.002054, 0.002216, 0.002351, 0.002459, 0.002541, 0.002600, 0.002640, 0.002666,],[0.000000,-0.000000,-0.000001, 0.000001, 0.000009, 0.000034, 0.000079, 0.000139, 0.000215, 0.000319, 0.000461, 0.000638, 0.000838, 0.001051, 0.001272, 0.001499, 0.001725, 0.001945, 0.002149, 0.002329, 0.002481, 0.002602, 0.002694, 0.002760, 0.002805, 0.002835,],[0.000000,0.000001,0.000009,0.000027,0.000055,0.000086,0.000115,0.000149,0.000210,0.000316,0.000467,0.000650,0.000852,0.001067,0.001295,0.001535,0.001779,0.002020,0.002245,0.002445,0.002614,0.002749,0.002851,0.002925,0.002975,0.003008,],[-0.000000, 0.000002, 0.000012, 0.000035, 0.000066, 0.000089, 0.000103, 0.000130, 0.000199, 0.000321, 0.000481, 0.000664, 0.000861, 0.001076, 0.001312, 0.001566, 0.001832, 0.002095, 0.002343, 0.002564, 0.002750, 0.002899, 0.003012, 0.003093, 0.003149, 0.003185,],[0.000000,-0.000000,-0.000001,-0.000003,-0.000005,-0.000000, 0.000025, 0.000089, 0.000198, 0.000340, 0.000500, 0.000670, 0.000859, 0.001074, 0.001321, 0.001594, 0.001883, 0.002172, 0.002443, 0.002686, 0.002890, 0.003054, 0.003177, 0.003267, 0.003328, 0.003367,],[-0.000000,-0.000001,-0.000009,-0.000025,-0.000041,-0.000037, 0.000010, 0.000106, 0.000233, 0.000370, 0.000509, 0.000661, 0.000842, 0.001062, 0.001324, 0.001621, 0.001935, 0.002250, 0.002547, 0.002811, 0.003034, 0.003212, 0.003347, 0.003444, 0.003510, 0.003553,],[0.000000,-0.000001,-0.000005,-0.000013,-0.000013, 0.000014, 0.000081, 0.000178, 0.000283, 0.000384, 0.000492, 0.000628, 0.000808, 0.001041, 0.001325, 0.001648, 0.001991, 0.002333, 0.002655, 0.002942, 0.003183, 0.003375, 0.003520, 0.003625, 0.003696, 0.003743,],[0.000000,0.000001,0.000010,0.000032,0.000071,0.000125,0.000184,0.000240,0.000292,0.000351,0.000438,0.000571,0.000764,0.001018,0.001328,0.001680,0.002051,0.002422,0.002769,0.003077,0.003336,0.003542,0.003698,0.003810,0.003887,0.003937,],[0.000000,0.000002,0.000012,0.000038,0.000079,0.000125,0.000164,0.000190,0.000217,0.000265,0.000356,0.000506,0.000721,0.001002,0.001341,0.001721,0.002121,0.002518,0.002890,0.003218,0.003494,0.003714,0.003880,0.003999,0.004081,0.004134,],[-0.000000, 0.000001, 0.000007, 0.000020, 0.000038, 0.000054, 0.000066, 0.000079, 0.000108, 0.000172, 0.000284, 0.000458, 0.000698, 0.001005, 0.001370, 0.001777, 0.002203, 0.002625, 0.003018, 0.003367, 0.003658, 0.003890, 0.004066, 0.004192, 0.004278, 0.004334,],[0.000000,-0.000000,-0.000001,-0.000002,-0.000003,-0.000003, 0.000002, 0.000021, 0.000062, 0.000140, 0.000267, 0.000455, 0.000712, 0.001038, 0.001423, 0.001852, 0.002301, 0.002743, 0.003157, 0.003522, 0.003828, 0.004072, 0.004256, 0.004388, 0.004479, 0.004538,],[-0.000000, 0.000001, 0.000009, 0.000028, 0.000055, 0.000080, 0.000097, 0.000112, 0.000142, 0.000207, 0.000327, 0.000513, 0.000773, 0.001107, 0.001505, 0.001949, 0.002415, 0.002875, 0.003306, 0.003686, 0.004005, 0.004259, 0.004451, 0.004588, 0.004683, 0.004744,],[-0.000000, 0.000002, 0.000015, 0.000048, 0.000100, 0.000161, 0.000214, 0.000252, 0.000287, 0.000345, 0.000452, 0.000627, 0.000881, 0.001214, 0.001617, 0.002071, 0.002548, 0.003022, 0.003466, 0.003859, 0.004188, 0.004451, 0.004649, 0.004792, 0.004890, 0.004953,],[0.000000,0.000001,0.000010,0.000033,0.000077,0.000144,0.000226,0.000311,0.000393,0.000480,0.000598,0.000773,0.001024,0.001355,0.001758,0.002216,0.002701,0.003184,0.003638,0.004040,0.004379,0.004648,0.004852,0.004999,0.005099,0.005164,],[-0.000000,-0.000001,-0.000011,-0.000029,-0.000039,-0.000008, 0.000087, 0.000233, 0.000397, 0.000557, 0.000724, 0.000924, 0.001184, 0.001518, 0.001923, 0.002383, 0.002872, 0.003362, 0.003822, 0.004231, 0.004576, 0.004851, 0.005059, 0.005209, 0.005311, 0.005378,],[0.000000,-0.000002,-0.000012,-0.000036,-0.000061,-0.000057, 0.000010, 0.000154, 0.000355, 0.000579, 0.000809, 0.001057, 0.001346, 0.001695, 0.002106, 0.002569, 0.003062, 0.003554, 0.004018, 0.004432, 0.004781, 0.005059, 0.005270, 0.005422, 0.005525, 0.005593,],[-0.000000, 0.000000, 0.000003, 0.000009, 0.000017, 0.000030, 0.000068, 0.000165, 0.000341, 0.000584, 0.000865, 0.001168, 0.001500, 0.001876, 0.002301, 0.002771, 0.003266, 0.003761, 0.004227, 0.004642, 0.004992, 0.005272, 0.005484, 0.005637, 0.005742, 0.005810,],[0.000000,0.000003,0.000025,0.000073,0.000137,0.000187,0.000217,0.000263,0.000386,0.000610,0.000915,0.001265,0.001645,0.002056,0.002504,0.002986,0.003485,0.003980,0.004446,0.004861,0.005211,0.005490,0.005702,0.005855,0.005960,0.006028,],[-0.000000, 0.000002, 0.000014, 0.000045, 0.000097, 0.000162, 0.000231, 0.000313, 0.000444, 0.000664, 0.000978, 0.001361, 0.001784, 0.002236, 0.002712, 0.003210, 0.003716, 0.004212, 0.004676, 0.005089, 0.005436, 0.005713, 0.005924, 0.006075, 0.006179, 0.006247,],[0.000000,-0.000001,-0.000005,-0.000011,-0.000001, 0.000052, 0.000159, 0.000310, 0.000497, 0.000739, 0.001063, 0.001467, 0.001927, 0.002417, 0.002924, 0.003441, 0.003957, 0.004455, 0.004917, 0.005325, 0.005668, 0.005941, 0.006148, 0.006297, 0.006400, 0.006466,],[-0.000000,-0.000002,-0.000014,-0.000036,-0.000047,-0.000004, 0.000121, 0.000316, 0.000552, 0.000828, 0.001170, 0.001592, 0.002079, 0.002603, 0.003142, 0.003681, 0.004207, 0.004708, 0.005167, 0.005569, 0.005905, 0.006173, 0.006376, 0.006521, 0.006621, 0.006686,],[0.000000,0.000002,0.000015,0.000048,0.000100,0.000171,0.000273,0.000426,0.000647,0.000934,0.001294,0.001734,0.002244,0.002798,0.003366,0.003928,0.004467,0.004970,0.005425,0.005820,0.006149,0.006409,0.006605,0.006746,0.006843,0.006905,],[-0.000000, 0.000004, 0.000034, 0.000104, 0.000205, 0.000311, 0.000413, 0.000544, 0.000750, 0.001047, 0.001429, 0.001892, 0.002425, 0.003004, 0.003599, 0.004182, 0.004734, 0.005241, 0.005692, 0.006079, 0.006398, 0.006649, 0.006837, 0.006972, 0.007064, 0.007124,],[0.000000,0.000003,0.000027,0.000084,0.000175,0.000291,0.000424,0.000594,0.000833,0.001159,0.001572,0.002062,0.002619,0.003224,0.003843,0.004446,0.005010,0.005520,0.005966,0.006344,0.006651,0.006891,0.007071,0.007199,0.007286,0.007342,],[-0.000000,-0.000001,-0.000010,-0.000020,-0.000003, 0.000089, 0.000282, 0.000555, 0.000884, 0.001267, 0.001718, 0.002241, 0.002827, 0.003456, 0.004098, 0.004720, 0.005295, 0.005807, 0.006248, 0.006614, 0.006909, 0.007137, 0.007306, 0.007426, 0.007507, 0.007559,],[0.000000,-0.000001,-0.000008,-0.000016, 0.000003, 0.000097, 0.000298, 0.000596, 0.000962, 0.001384, 0.001871, 0.002429, 0.003046, 0.003702, 0.004366, 0.005005, 0.005590, 0.006103, 0.006536, 0.006891, 0.007171, 0.007385, 0.007542, 0.007652, 0.007727, 0.007775,],[-0.000000, 0.000003, 0.000022, 0.000072, 0.000161, 0.000291, 0.000476, 0.000733, 0.001078, 0.001513, 0.002032, 0.002625, 0.003276, 0.003961, 0.004648, 0.005302, 0.005895, 0.006407, 0.006832, 0.007173, 0.007437, 0.007635, 0.007778, 0.007878, 0.007945, 0.007988,],[0.000000,0.000007,0.000057,0.000174,0.000343,0.000519,0.000686,0.000893,0.001208,0.001651,0.002201,0.002832,0.003519,0.004233,0.004943,0.005612,0.006211,0.006720,0.007135,0.007460,0.007706,0.007886,0.008015,0.008103,0.008161,0.008199,],[-0.000000, 0.000004, 0.000030, 0.000097, 0.000215, 0.000385, 0.000608, 0.000902, 0.001290, 0.001785, 0.002378, 0.003050, 0.003774, 0.004521, 0.005253, 0.005936, 0.006539, 0.007044, 0.007445, 0.007752, 0.007978, 0.008139, 0.008251, 0.008326, 0.008375, 0.008407,],[0.000000,-0.000001,-0.000007,-0.000010, 0.000031, 0.000175, 0.000460, 0.000868, 0.001361, 0.001925, 0.002567, 0.003282, 0.004046, 0.004825, 0.005580, 0.006276, 0.006880, 0.007377, 0.007763, 0.008049, 0.008252, 0.008392, 0.008486, 0.008548, 0.008587, 0.008611,],[-0.000000,-0.000002,-0.000015,-0.000031,-0.000002, 0.000149, 0.000467, 0.000925, 0.001471, 0.002084, 0.002772, 0.003531, 0.004335, 0.005148, 0.005926, 0.006633, 0.007236, 0.007722, 0.008088, 0.008350, 0.008529, 0.008645, 0.008720, 0.008766, 0.008795, 0.008812,],[0.000000,0.000006,0.000049,0.000153,0.000322,0.000542,0.000814,0.001173,0.001657,0.002272,0.002997,0.003801,0.004647,0.005493,0.006293,0.007008,0.007608,0.008078,0.008422,0.008656,0.008807,0.008898,0.008952,0.008982,0.009000,0.009009,],[0.000000,0.000010,0.000079,0.000241,0.000484,0.000752,0.001023,0.001356,0.001833,0.002473,0.003243,0.004095,0.004984,0.005863,0.006684,0.007405,0.007997,0.008448,0.008764,0.008967,0.009086,0.009150,0.009181,0.009195,0.009200,0.009202,],[-0.000000, 0.000007, 0.000051, 0.000163, 0.000351, 0.000608, 0.000941, 0.001382, 0.001962, 0.002680, 0.003511, 0.004416, 0.005351, 0.006263, 0.007103, 0.007826, 0.008405, 0.008831, 0.009114, 0.009282, 0.009367, 0.009401, 0.009408, 0.009403, 0.009396, 0.009390,],[0.000000,-0.000004,-0.000025,-0.000056,-0.000023, 0.000190, 0.000650, 0.001307, 0.002070, 0.002903, 0.003807, 0.004770, 0.005751, 0.006696, 0.007552, 0.008274, 0.008835, 0.009230, 0.009474, 0.009601, 0.009648, 0.009649, 0.009631, 0.009607, 0.009587, 0.009572,],[-0.000000,-0.000001,-0.000006, 0.000003, 0.000087, 0.000343, 0.000825, 0.001497, 0.002290, 0.003174, 0.004139, 0.005161, 0.006190, 0.007167, 0.008036, 0.008752, 0.009289, 0.009645, 0.009844, 0.009924, 0.009929, 0.009895, 0.009850, 0.009807, 0.009773, 0.009749,],[0.000000,0.000009,0.000073,0.000233,0.000502,0.000864,0.001309,0.001870,0.002595,0.003489,0.004510,0.005593,0.006672,0.007681,0.008561,0.009265,0.009769,0.010078,0.010223,0.010251,0.010209,0.010138,0.010064,0.010000,0.009952,0.009919,],[-0.000000, 0.000019, 0.000145, 0.000441, 0.000867, 0.001308, 0.001715, 0.002197, 0.002897, 0.003833, 0.004922, 0.006072, 0.007202, 0.008243, 0.009130, 0.009817, 0.010279, 0.010531, 0.010613, 0.010581, 0.010488, 0.010377, 0.010273, 0.010188, 0.010125, 0.010083,],[0.000000,0.000007,0.000058,0.000192,0.000439,0.000828,0.001387,0.002144,0.003090,0.004185,0.005377,0.006602,0.007787,0.008860,0.009753,0.010413,0.010822,0.011003,0.011012,0.010913,0.010765,0.010611,0.010475,0.010369,0.010292,0.010240,],[-0.000000,-0.000005,-0.000034,-0.000071,-0.000006, 0.000340, 0.001078, 0.002130, 0.003330, 0.004587, 0.005884, 0.007189, 0.008435, 0.009545, 0.010440, 0.011062, 0.011402, 0.011497, 0.011420, 0.011246, 0.011038, 0.010839, 0.010671, 0.010542, 0.010451, 0.010390,],[-0.000000,-0.000004,-0.000029,-0.000047, 0.000069, 0.000506, 0.001345, 0.002473, 0.003733, 0.005065, 0.006451, 0.007841, 0.009158, 0.010311, 0.011203, 0.011772, 0.012021, 0.012013, 0.011837, 0.011580, 0.011307, 0.011061, 0.010860, 0.010708, 0.010602, 0.010532,],[-0.000000, 0.000022, 0.000172, 0.000537, 0.001105, 0.001773, 0.002468, 0.003266, 0.004308, 0.005618, 0.007083, 0.008573, 0.009981, 0.011184, 0.012061, 0.012551, 0.012683, 0.012549, 0.012260, 0.011912, 0.011570, 0.011275, 0.011040, 0.010866, 0.010745, 0.010666,],[0.000000,0.000031,0.000242,0.000738,0.001455,0.002195,0.002867,0.003646,0.004754,0.006186,0.007784,0.009412,0.010941,0.012199,0.013036,0.013410,0.013390,0.013106,0.012688,0.012240,0.011826,0.011480,0.011211,0.011015,0.010880,0.010791,],[-0.000000, 0.000015, 0.000118, 0.000372, 0.000799, 0.001411, 0.002286, 0.003517, 0.005064, 0.006783, 0.008587, 0.010417, 0.012104, 0.013403, 0.014153, 0.014357, 0.014143, 0.013679, 0.013118, 0.012562, 0.012073, 0.011676, 0.011373, 0.011154, 0.011005, 0.010908,],[0.000000,-0.000022,-0.000163,-0.000424,-0.000544,-0.000049, 0.001329, 0.003327, 0.005442, 0.007486, 0.009576, 0.011699, 0.013567, 0.014856, 0.015437, 0.015397, 0.014937, 0.014265, 0.013544, 0.012875, 0.012309, 0.011860, 0.011524, 0.011284, 0.011121, 0.011016,],[0.000000,-0.000006,-0.000038,-0.000040, 0.000219, 0.001054, 0.002535, 0.004368, 0.006305, 0.008455, 0.010933, 0.013446, 0.015461, 0.016623, 0.016908, 0.016529, 0.015765, 0.014856, 0.013963, 0.013176, 0.012531, 0.012032, 0.011663, 0.011403, 0.011228, 0.011114,],[-0.000000, 0.000044, 0.000345, 0.001086, 0.002254, 0.003579, 0.004745, 0.005819, 0.007368, 0.009852, 0.012991, 0.015934, 0.017937, 0.018755, 0.018570, 0.017742, 0.016616, 0.015442, 0.014368, 0.013461, 0.012739, 0.012190, 0.011790, 0.011511, 0.011324, 0.011203,],[0.000000,0.000091,0.000690,0.002047,0.003802,0.005140,0.005725,0.006433,0.008537,0.012212,0.016316,0.019504,0.021127,0.021275,0.020406,0.019013,0.017471,0.016012,0.014752,0.013726,0.012929,0.012333,0.011905,0.011608,0.011409,0.011282,],[-0.000000, 0.000009, 0.000064, 0.000182, 0.000357, 0.000781, 0.002150, 0.005404, 0.010679, 0.016708, 0.021668, 0.024466, 0.025087, 0.024148, 0.022367, 0.020303, 0.018306, 0.016553, 0.015107, 0.013966, 0.013099, 0.012460, 0.012006, 0.011692, 0.011484, 0.011351,],[-0.000000,-0.000099,-0.000746,-0.002143,-0.003585,-0.003288, 0.000613, 0.008281, 0.017515, 0.025281, 0.029769, 0.030932, 0.029729, 0.027260, 0.024368, 0.021561, 0.019092, 0.017048, 0.015425, 0.014178, 0.013247, 0.012570, 0.012092, 0.011765, 0.011548, 0.011410,],[0.000000,-0.000119,-0.000863,-0.002186,-0.002482, 0.001075, 0.010006, 0.022192, 0.033098, 0.039409, 0.040756, 0.038628, 0.034762, 0.030413, 0.026293, 0.022725, 0.019797, 0.017482, 0.015699, 0.014358, 0.013372, 0.012662, 0.012164, 0.011824, 0.011601, 0.011458,],[-0.000000, 0.000288, 0.002281, 0.007499, 0.016808, 0.029658, 0.043498, 0.054483, 0.059666, 0.058764, 0.053681, 0.046766, 0.039695, 0.033335, 0.028004, 0.023726, 0.020389, 0.017838, 0.015921, 0.014503, 0.013470, 0.012734, 0.012220, 0.011871, 0.011642, 0.011496,],[0.000000,0.000880,0.006864,0.021621,0.044860,0.070697,0.090017,0.096626,0.091335,0.079549,0.066276,0.054108,0.043898,0.035720,0.029357,0.024498,0.020836,0.018104,0.016085,0.014608,0.013542,0.012786,0.012260,0.011905,0.011671,0.011523,],[0.000000,0.002151,0.016523,0.050022,0.096568,0.137002,0.153368,0.144025,0.121068,0.096513,0.075654,0.059266,0.046737,0.037287,0.030226,0.024986,0.021115,0.018268,0.016185,0.014672,0.013586,0.012817,0.012285,0.011925,0.011689,0.011539,],[1.000000,0.993236,0.947458,0.836009,0.663644,0.471550,0.310364,0.203501,0.141363,0.104206,0.079235,0.061134,0.047742,0.037834,0.030527,0.025153,0.021210,0.018324,0.016219,0.014694,0.013600,0.012828,0.012293,0.011931,0.011695,0.011545]],
    df_ks: false,
    get_dist_fir: function(km_in,fir_imp,Fs)
    {
        //Cap at end of interpolation
        var km = km_in > this.df_dist[this.df_dist.length - 1] ? this.df_dist[this.df_dist.length - 1] : km_in;

        if(Fs != 22000 && Fs != 44100)
            alert("Invalid sample rate for distance attenuation");
        this.df_coef = (Fs == 44100 ? this.df_coef_441 : this.df_coef_22);
        if(!this.df_ks) {
            this.df_ks = [];
            for (var i = 0; i < this.df_coef.length; i++)
            {
                this.df_ks.push(new Array(this.df_coef[i].length));
                CSPL.getNaturalKs(this.df_dist,this.df_coef[i],this.df_ks[i]);
            }
        }

        for(var i = 0; i < Math.ceil(this.df_fir_length/2); i++)
        {
            fir_imp[i] = CSPL.evalSpline(km, this.df_dist, this.df_coef[i], this.df_ks[i]);
        }
        for(var i = 0; i < Math.floor(this.df_fir_length/2); i++)
        {
            fir_imp[Math.ceil(this.df_fir_length/2)+i] = fir_imp[Math.floor(this.df_fir_length/2)-1-i];
        }

        return fir_imp;
    },
    //Divides into points and segment lengths so that the maximum difference between two adjacent distances is ds
    divide: function(l_points,listener,ds)
    {
        //Divides into points and segment lengths so that the maximum difference between two adjacent distances is ds
        var lightning_points = [];
        var p1_dist,p2_dist,d_dist,s_length,divisions,div_point,p_length;

        //First point
        lightning_points.push(l_points[0]);
        lightning_points[lightning_points.length-1].length = 0;
        for(var i = 1; i < l_points.length; i++)
        {
            //console.log((i / l_points.length * 100).toFixed(1) + "%");
            p1_dist = this.dist(listener,l_points[i-1]);
            p2_dist = this.dist(listener,l_points[i]);
            d_dist = Math.abs(p2_dist-p1_dist);
            s_length = this.dist(l_points[i-1],l_points[i]);

            //So, how many parts do we divide this into?
            divisions = Math.ceil(d_dist / ds);

            //Length of the partitions
            p_length = s_length/divisions;

            //Push the intermediate points
            for(var j = 1; j < divisions; j++)
            {
                div_point = this.point_between_points(l_points[i-1],l_points[i],j/divisions);
                //Add micro-/mesotortuosity (small randomness between the macrotortuos segments)
                div_point.x += p_length * (Math.random() * 0.3 - 0.15);
                div_point.y += p_length * (Math.random() * 0.3 - 0.15);
                div_point.z += p_length * (Math.random() * 0.3 - 0.15);
                lightning_points.push(div_point);
                lightning_points[lightning_points.length-1].length = p_length;
            }

            //Push the final point
            lightning_points.push(l_points[i]);
            lightning_points[lightning_points.length-1].length = p_length;
        }

        return lightning_points;
    },

    //Distance between two points
    dist: function(p1,p2)
    {
        return Math.sqrt(Math.pow(p2.x-p1.x,2)+Math.pow(p2.y-p1.y,2)+Math.pow(p2.z-p1.z,2))
    },

    //http://james.padolsey.com/javascript/deep-copying-of-objects-and-arrays/
    deepCopy: function(obj)
    {
        if (Object.prototype.toString.call(obj) === '[object Array]') {
            var out = [], i = 0, len = obj.length;
            for (; i < len; i++) {
                out[i] = arguments.callee(obj[i]);
            }
            return out;
        }
        if (typeof obj === 'object') {
            var out = {}, i;
            for (i in obj) {
                out[i] = arguments.callee(obj[i]);
            }
            return out;
        }
        return obj;
    },

    point_between_points: function(p1,p2,relative_distance)
    {
        var p = this.deepCopy(p1);
        p.x = p1.x + (p2.x-p1.x)*relative_distance;
        p.y = p1.y + (p2.y-p1.y)*relative_distance;
        p.z = p1.z + (p2.z-p1.z)*relative_distance;
        return(p);
    },

    distance_attenuation: function(samples)
    {
        self.postMessage("Starting distance attenuation");
        self.postMessage("Samples: " + samples.length);
        var y = new Array(samples.length + this.df_fir_length - 1);
        for (var i = 0; i < y.length; i++ ) {
            y[i] = 0;
        }
        var s,h;
        h = new Array(this.df_fir_length);
        for(var i = 0; i < samples.length; i++)
        {
            s = 1.5 * (this.settings.cs * i) / (this.settings.Fs * 1000.0); //1.5 x the attenuation
            this.get_dist_fir(s,h,this.settings.Fs);

            /*
            if(i == 0) {
                console.log(h);
                console.log(h.length);
            }*/

            for (var j = 0; j < h.length; j++ )
            {
                y[i+j] += samples[i] * h[j];    // convolve: multiply and accumulate
            }
        }

        return y;
    },


    brode_pulse: function(source,listener,Fs)
    {
        //Function for estimating the pulse as a function of
        //the length of the positive part of the pressure [m]
        function brode(L_positive,Fs)
        {
            var scale = L_positive/0.5;
            var samples = Math.ceil(scale*2.5/340.0*Fs);

            if(this.previous_brode_length && this.previous_brode_length == samples)
            {
                //No need to calculate identical pulses
                return false;
            }

            function f(x) {//0-2.5m, For L_pos = 0.5m (0.0015s)
                return -0.0279 * x - 0.376 * Math.pow(x,2) - 0.485 * Math.pow(x,3) + 0.596 * Math.pow(x,4) - 0.1259 * Math.pow(x,5);
            }

            var pulse = new Array(samples);
            for(var i = 0; i < samples; i++)
            {
                pulse[i] = (f(2.5-i/samples*2.5));
            }

            this.previous_brode_length = samples;
            return pulse;
        }

        var Rc = 0.5; //Earth's electrical environment, p. 50
        var H0 = source.z - listener.z + 0.00001;
        var theta = Math.acos(H0/this.dist(source,listener)); //Angle between vertical and acoustic ray
        //pHandbook of Atmospheric Electrodynamics, Volume 2, p. 16
        var Lg = Rc*Math.pow(0.386+0.147*(Math.log(H0/(10.46*Rc*Math.cos(theta)))-H0/16000),2/3);
        return brode(Lg,Fs);
    }
};

self.addEventListener('message', function(e) {
    var data = e.data;
    var lightning = data.lightning;
    var listener = data.listener;
    var settings = data.settings;
    LightningWorker.settings = settings;

    self.postMessage({'process': 1.0});

    var pts = LightningWorker.divide(lightning.main,listener,0.5*settings.cs/settings.Fs);
    //console.log("Points: " + pts.length);
    var brode_pulse = {length: 0};
    var max_t = 0;
    var min_t = 10000;
    var main_length = pts.length;
    for(var i = 0; i < pts.length; i++) {
        pts[i].dist = LightningWorker.dist(listener, pts[i]);
        pts[i].A = (10000.0 * pts[i].length) / pts[i].dist;
        pts[i].t = pts[i].dist / settings.cs;
        pts[i].s = Math.round(pts[i].t * settings.Fs);

        if(i % 10000 == 0)
            console.log(pts[i].dist + ": " + pts[i].s + " samples");

        if(pts[i].t > max_t)
        {
            max_t = pts[i].t;
        }
        if(pts[i].t < min_t)
        {
            min_t = pts[i].t;
        }
    }
    self.postMessage({'process': 5.0});
    //Go through branches
    for(var j = 0; j < lightning.branches.length; j++)
    {
        console.log("Branch " + j);
        var pts_pos = pts.length - 1;
        pts = pts.concat(LightningWorker.divide(lightning.branches[j],listener,0.25*settings.cs/settings.Fs));
        for(var i = pts_pos; i < pts.length; i++) {
            pts[i].dist = LightningWorker.dist(listener, pts[i]);
            pts[i].A = 0.2 * (10000.0 * pts[i].length) / pts[i].dist;
            pts[i].t = pts[i].dist / settings.cs;
            pts[i].s = Math.round(pts[i].t * settings.Fs);

            if(i % 10000 == 0)
                console.log(pts[i].dist + ": " + pts[i].s + " samples");

            if(pts[i].t > max_t)
            {
                max_t = pts[i].t;
            }
            if(pts[i].t < min_t)
            {
                min_t = pts[i].t;
            }
        }
        self.postMessage({'process': 5.0 + (j / lightning.branches.length * 5.0)});
    }
    //Go through top
    for(var j = 0; j < lightning.top.length; j++)
    {
        console.log("Top " + j);
        var pts_pos = pts.length - 1;
        pts = pts.concat(LightningWorker.divide(lightning.top[j],listener,0.25*settings.cs/settings.Fs));
        for(var i = pts_pos; i < pts.length; i++) {
            pts[i].dist = LightningWorker.dist(listener, pts[i]);
            pts[i].A = 0.1 * (10000.0 * pts[i].length) / pts[i].dist;
            pts[i].t = pts[i].dist / settings.cs;
            pts[i].s = Math.round(pts[i].t * settings.Fs);

            if(i % 10000 == 0)
                console.log(pts[i].dist + ": " + pts[i].s + " samples");

            if(pts[i].t > max_t)
            {
                max_t = pts[i].t;
            }
            if(pts[i].t < min_t)
            {
                min_t = pts[i].t;
            }
        }
        self.postMessage({'process': 10.0 + (j / lightning.top.length * 5.0)});
    }


    console.log("Max t: " + max_t);
    console.log("Represents " + (max_t * settings.cs) + " meters or " + (max_t * settings.Fs) + " samples");
    console.log("Min t: " + min_t);
    console.log("Represents " + (min_t * settings.cs) + " meters");
    this.pts = pts;

    //Array for the final sound
    var thunder = new Array(Math.round(max_t * settings.Fs + 2 * settings.Fs));
    console.log("Array samples: " + thunder.length);
    for(var j = 0; j < thunder.length; j++)
    {
        thunder[j] = 0;
    }

    for(var i = 0; i < pts.length; i++) {
        var new_pulse = LightningWorker.brode_pulse(pts[i],listener,settings.Fs);
        if(new_pulse) {
            brode_pulse = new_pulse;
        }
        //Add the brode pulse to the correct position
        for(var j = 0; j < brode_pulse.length; j++)
        {
            thunder[pts[i].s+j] += pts[i].A*brode_pulse[j];
        }
        if(i % 1000 == 0)
        {
            self.postMessage({'process': 15.0 + (i/pts.length*15.0)});
        }
    }

    self.postMessage({'process': 30.0});

    console.log("Processing reverb");
    thunder = Reverb.process(thunder,settings.Fs);
    console.log("Reverb done");

    self.postMessage({'process': 80.0});

    console.log("Distance attenuation");
    thunder = LightningWorker.distance_attenuation(thunder);

    self.postMessage({'process': 98.0});

    console.log("Final length: " + thunder.length);

    var max_A = 0;
    for(var i = 0; i < thunder.length; i++)
    {
        if(Math.abs(thunder[i]) > max_A) {
            max_A = Math.abs(thunder[i]);
        }
    }
    console.log("Max A: " + max_A);
    for(var i = 0; i < thunder.length; i++)
    {
        thunder[i] = thunder[i] / max_A;
    }

    self.postMessage({'process': 100.0, 'thunder': thunder});

}, false);






/**
 * Super-minimalistic convolution reverb :-)
 * Copyright Kai Saksela 2014
 *
 * This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


function Reverb(){};

Reverb._convolve = function(x,h)
{
    var y = new Array(x.length + h.length - 1);
    for (var i = 0; i < y.length; i++ ) {
        y[i] = 0;
    }
    for (var i = 0; i < x.length; i++ )
    {
        if(i % 1000 == 0)
            console.log((i/ y.length*100).toFixed(1) + "% (conv)");

        for (var j = 0; j < h.length; j++ )
        {
            y[i+j] += x[i] * h[j];    // convolve: multiply and accumulate
        }
    }
    return y;
}
Reverb._impulse = function(Fs)
{

    //1. generate enveloped noise
    //2. filter it using predefined FIR filter

    var predelay = 0.17;
    var attack = 0.14;
    var release = 2;
    var mix = 0.04;

    var s0 = predelay * Fs;
    var s1 = s0 + attack * Fs;
    var s2 = s1 + release * Fs;


    //Generate noise
    var noise = new Array(s2);
    for(var i = 0; i < noise.length; i++)
    {
        if(i < s0)
            noise[i] = 0.0; //predelay
        else if(i < s1) //attack
            noise[i] = (Math.random() * 2.0 - 1.0) * mix * ((i-s0)/(s1-s0));
        else if(i < s2 - 200) //decay
            noise[i] = (Math.random() * 2.0 - 1.0) * mix * Math.exp((s2-i)/(s2-s1)*5)/Math.exp(5);
        else
            noise[i] = (Math.random() * 2.0 - 1.0) * mix * Math.exp((s2-i)/(s2-s1)*5)/Math.exp(5) * (s2 - i) / 200;
    }

    //Filter it
    var fir = [1];
    if(Fs == 22000)
        fir = [-0.000987, 0.002200, 0.005268, 0.009536, 0.012765, 0.019191, 0.025623, 0.039671, 0.047708, 0.088804, 0.239086, 0.088804, 0.047708, 0.039671, 0.025623, 0.019191, 0.012765, 0.009536, 0.005268, 0.002200,-0.000987];
    else if(Fs == 44100)
        fir = [0.009000,0.011156,0.013170,0.016462,0.019123,0.023487,0.025835,0.031603,0.031261,0.057572,0.194436,0.057572,0.031261,0.031603,0.025835,0.023487,0.019123,0.016462,0.013170,0.011156,0.009000];
    else
        alert("Invalid sample rate");
    noise = this._convolve(noise,fir);
    noise[0]= 1.0; //direct sound

    return noise;
}

Reverb.process = function(x,Fs)
{
    if(!this._impz)
        this._impz = this._impulse(Fs);

    var impz_padded = new Array(x.length);
    for(var i = 0; i < this._impz.length; i++)
    {
        impz_padded[i] = this._impz[i];
    }
    for(var i = this._impz.length-1; i < impz_padded.length; i++)
    {
        impz_padded[i] = 0;
    }
    var final_noise = new Array(x.length);
    console.log("Starting FFT convolution");
    convolveReal(x,impz_padded,final_noise);
    console.log("FFT convolution done");

    return final_noise;
}







/*
 * Free FFT and convolution (JavaScript)
 *
 * Copyright (c) 2014 Nayuki Minase
 * http://nayuki.eigenstate.org/page/free-small-fft-in-multiple-languages
 *
 * (MIT License)
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * - The above copyright notice and this permission notice shall be included in
 *   all copies or substantial portions of the Software.
 * - The Software is provided "as is", without warranty of any kind, express or
 *   implied, including but not limited to the warranties of merchantability,
 *   fitness for a particular purpose and noninfringement. In no event shall the
 *   authors or copyright holders be liable for any claim, damages or other
 *   liability, whether in an action of contract, tort or otherwise, arising from,
 *   out of or in connection with the Software or the use or other dealings in the
 *   Software.
 */


/*
 * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.
 * The vector can have any length. This is a wrapper function.
 */
function transform(real, imag) {
    if (real.length != imag.length)
        throw "Mismatched lengths";

    var n = real.length;
    if (n == 0)
        return;
    else if ((n & (n - 1)) == 0)  // Is power of 2
        transformRadix2(real, imag);
    else  // More complicated algorithm for arbitrary sizes
        transformBluestein(real, imag);
}


/*
 * Computes the inverse discrete Fourier transform (IDFT) of the given complex vector, storing the result back into the vector.
 * The vector can have any length. This is a wrapper function. This transform does not perform scaling, so the inverse is not a true inverse.
 */
function inverseTransform(real, imag) {
    transform(imag, real);
}


/*
 * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.
 * The vector's length must be a power of 2. Uses the Cooley-Tukey decimation-in-time radix-2 algorithm.
 */
function transformRadix2(real, imag) {
    // Initialization
    if (real.length != imag.length)
        throw "Mismatched lengths";
    var n = real.length;
    if (n == 1)  // Trivial transform
        return;
    var levels = -1;
    for (var i = 0; i < 32; i++) {
        if (1 << i == n)
            levels = i;  // Equal to log2(n)
    }
    if (levels == -1)
        throw "Length is not a power of 2";
    var cosTable = new Array(n / 2);
    var sinTable = new Array(n / 2);
    for (var i = 0; i < n / 2; i++) {
        cosTable[i] = Math.cos(2 * Math.PI * i / n);
        sinTable[i] = Math.sin(2 * Math.PI * i / n);
    }

    // Bit-reversed addressing permutation
    for (var i = 0; i < n; i++) {
        var j = reverseBits(i, levels);
        if (j > i) {
            var temp = real[i];
            real[i] = real[j];
            real[j] = temp;
            temp = imag[i];
            imag[i] = imag[j];
            imag[j] = temp;
        }
    }

    // Cooley-Tukey decimation-in-time radix-2 FFT
    for (var size = 2; size <= n; size *= 2) {
        var halfsize = size / 2;
        var tablestep = n / size;
        for (var i = 0; i < n; i += size) {
            for (var j = i, k = 0; j < i + halfsize; j++, k += tablestep) {
                var tpre =  real[j+halfsize] * cosTable[k] + imag[j+halfsize] * sinTable[k];
                var tpim = -real[j+halfsize] * sinTable[k] + imag[j+halfsize] * cosTable[k];
                real[j + halfsize] = real[j] - tpre;
                imag[j + halfsize] = imag[j] - tpim;
                real[j] += tpre;
                imag[j] += tpim;
            }
        }
    }

    // Returns the integer whose value is the reverse of the lowest 'bits' bits of the integer 'x'.
    function reverseBits(x, bits) {
        var y = 0;
        for (var i = 0; i < bits; i++) {
            y = (y << 1) | (x & 1);
            x >>>= 1;
        }
        return y;
    }
}


/*
 * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.
 * The vector can have any length. This requires the convolution function, which in turn requires the radix-2 FFT function.
 * Uses Bluestein's chirp z-transform algorithm.
 */
function transformBluestein(real, imag) {
    // Find a power-of-2 convolution length m such that m >= n * 2 + 1
    if (real.length != imag.length)
        throw "Mismatched lengths";
    var n = real.length;
    var m = 1;
    while (m < n * 2 + 1)
        m *= 2;

    // Trignometric tables
    var cosTable = new Array(n);
    var sinTable = new Array(n);
    for (var i = 0; i < n; i++) {
        var j = i * i % (n * 2);  // This is more accurate than j = i * i
        cosTable[i] = Math.cos(Math.PI * j / n);
        sinTable[i] = Math.sin(Math.PI * j / n);
    }

    // Temporary vectors and preprocessing
    var areal = new Array(m);
    var aimag = new Array(m);
    for (var i = 0; i < n; i++) {
        areal[i] =  real[i] * cosTable[i] + imag[i] * sinTable[i];
        aimag[i] = -real[i] * sinTable[i] + imag[i] * cosTable[i];
    }
    for (var i = n; i < m; i++)
        areal[i] = aimag[i] = 0;
    var breal = new Array(m);
    var bimag = new Array(m);
    breal[0] = cosTable[0];
    bimag[0] = sinTable[0];
    for (var i = 1; i < n; i++) {
        breal[i] = breal[m - i] = cosTable[i];
        bimag[i] = bimag[m - i] = sinTable[i];
    }
    for (var i = n; i <= m - n; i++)
        breal[i] = bimag[i] = 0;

    // Convolution
    var creal = new Array(m);
    var cimag = new Array(m);
    convolveComplex(areal, aimag, breal, bimag, creal, cimag);

    // Postprocessing
    for (var i = 0; i < n; i++) {
        real[i] =  creal[i] * cosTable[i] + cimag[i] * sinTable[i];
        imag[i] = -creal[i] * sinTable[i] + cimag[i] * cosTable[i];
    }
}


/*
 * Computes the circular convolution of the given real vectors. Each vector's length must be the same.
 */
function convolveReal(x, y, out) {
    if (x.length != y.length || x.length != out.length)
        throw "Mismatched lengths";
    var zeros = new Array(x.length);
    for (var i = 0; i < zeros.length; i++)
        zeros[i] = 0;
    convolveComplex(x, zeros, y, zeros.slice(0), out, zeros.slice(0));
}


/*
 * Computes the circular convolution of the given complex vectors. Each vector's length must be the same.
 */
function convolveComplex(xreal, ximag, yreal, yimag, outreal, outimag) {
    if (xreal.length != ximag.length || xreal.length != yreal.length || yreal.length != yimag.length || xreal.length != outreal.length || outreal.length != outimag.length)
        throw "Mismatched lengths";

    var n = xreal.length;
    xreal = xreal.slice(0);
    ximag = ximag.slice(0);
    yreal = yreal.slice(0);
    yimag = yimag.slice(0);

    transform(xreal, ximag);
    transform(yreal, yimag);
    for (var i = 0; i < n; i++) {
        var temp = xreal[i] * yreal[i] - ximag[i] * yimag[i];
        ximag[i] = ximag[i] * yreal[i] + xreal[i] * yimag[i];
        xreal[i] = temp;
    }
    inverseTransform(xreal, ximag);
    for (var i = 0; i < n; i++) {  // Scaling (because this FFT implementation omits it)
        outreal[i] = xreal[i] / n;
        outimag[i] = ximag[i] / n;
    }
}


/**
 * http://blog.ivank.net/interpolation-with-cubic-splines.html
 *
 * Copyright Ivan Kuckir
 */

function CSPL(){};

CSPL._gaussJ = {};
CSPL._gaussJ.solve = function(A, x)	// in Matrix, out solutions
{
    var m = A.length;
    for(var k=0; k<m; k++)	// column
    {
        // pivot for column
        var i_max = 0; var vali = Number.NEGATIVE_INFINITY;
        for(var i=k; i<m; i++) if(A[i][k]>vali) { i_max = i; vali = A[i][k];}
        CSPL._gaussJ.swapRows(A, k, i_max);

        if(A[i_max][i] == 0) console.log("matrix is singular!");

        // for all rows below pivot
        for(var i=k+1; i<m; i++)
        {
            for(var j=k+1; j<m+1; j++)
                A[i][j] = A[i][j] - A[k][j] * (A[i][k] / A[k][k]);
            A[i][k] = 0;
        }
    }

    for(var i=m-1; i>=0; i--)	// rows = columns
    {
        var v = A[i][m] / A[i][i];
        x[i] = v;
        for(var j=i-1; j>=0; j--)	// rows
        {
            A[j][m] -= A[j][i] * v;
            A[j][i] = 0;
        }
    }
}
CSPL._gaussJ.zerosMat = function(r,c) {var A = []; for(var i=0; i<r; i++) {A.push([]); for(var j=0; j<c; j++) A[i].push(0);} return A;}
CSPL._gaussJ.printMat = function(A){ for(var i=0; i<A.length; i++) console.log(A[i]); }
CSPL._gaussJ.swapRows = function(m, k, l) {var p = m[k]; m[k] = m[l]; m[l] = p;}


CSPL.getNaturalKs = function(xs, ys, ks)	// in x values, in y values, out k values
{
    var n = xs.length-1;
    var A = CSPL._gaussJ.zerosMat(n+1, n+2);

    for(var i=1; i<n; i++)	// rows
    {
        A[i][i-1] = 1/(xs[i] - xs[i-1]);

        A[i][i  ] = 2 * (1/(xs[i] - xs[i-1]) + 1/(xs[i+1] - xs[i])) ;

        A[i][i+1] = 1/(xs[i+1] - xs[i]);

        A[i][n+1] = 3*( (ys[i]-ys[i-1])/((xs[i] - xs[i-1])*(xs[i] - xs[i-1]))  +  (ys[i+1]-ys[i])/ ((xs[i+1] - xs[i])*(xs[i+1] - xs[i])) );
    }

    A[0][0  ] = 2/(xs[1] - xs[0]);
    A[0][1  ] = 1/(xs[1] - xs[0]);
    A[0][n+1] = 3 * (ys[1] - ys[0]) / ((xs[1]-xs[0])*(xs[1]-xs[0]));

    A[n][n-1] = 1/(xs[n] - xs[n-1]);
    A[n][n  ] = 2/(xs[n] - xs[n-1]);
    A[n][n+1] = 3 * (ys[n] - ys[n-1]) / ((xs[n]-xs[n-1])*(xs[n]-xs[n-1]));

    CSPL._gaussJ.solve(A, ks);
}

CSPL.evalSpline = function(x, xs, ys, ks)
{
    var i = 1;
    while(xs[i]<x) i++;

    var t = (x - xs[i-1]) / (xs[i] - xs[i-1]);

    var a =  ks[i-1]*(xs[i]-xs[i-1]) - (ys[i]-ys[i-1]);
    var b = -ks[i  ]*(xs[i]-xs[i-1]) + (ys[i]-ys[i-1]);

    var q = (1-t)*ys[i-1] + t*ys[i] + t*(1-t)*(a*(1-t)+b*t);
    return q;
}


